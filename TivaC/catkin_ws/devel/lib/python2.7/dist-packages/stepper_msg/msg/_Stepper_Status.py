# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from stepper_msg/Stepper_Status.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Stepper_Status(genpy.Message):
  _md5sum = "8b977b7753d25b4757850d088d3939b1"
  _type = "stepper_msg/Stepper_Status"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int64 position_steps
int32 speed_steps_per_second
bool direction_forward
bool enabled
string errors"""
  __slots__ = ['position_steps','speed_steps_per_second','direction_forward','enabled','errors']
  _slot_types = ['int64','int32','bool','bool','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       position_steps,speed_steps_per_second,direction_forward,enabled,errors

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Stepper_Status, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.position_steps is None:
        self.position_steps = 0
      if self.speed_steps_per_second is None:
        self.speed_steps_per_second = 0
      if self.direction_forward is None:
        self.direction_forward = False
      if self.enabled is None:
        self.enabled = False
      if self.errors is None:
        self.errors = ''
    else:
      self.position_steps = 0
      self.speed_steps_per_second = 0
      self.direction_forward = False
      self.enabled = False
      self.errors = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_qi2B().pack(_x.position_steps, _x.speed_steps_per_second, _x.direction_forward, _x.enabled))
      _x = self.errors
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.position_steps, _x.speed_steps_per_second, _x.direction_forward, _x.enabled,) = _get_struct_qi2B().unpack(str[start:end])
      self.direction_forward = bool(self.direction_forward)
      self.enabled = bool(self.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.errors = str[start:end].decode('utf-8')
      else:
        self.errors = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_qi2B().pack(_x.position_steps, _x.speed_steps_per_second, _x.direction_forward, _x.enabled))
      _x = self.errors
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 14
      (_x.position_steps, _x.speed_steps_per_second, _x.direction_forward, _x.enabled,) = _get_struct_qi2B().unpack(str[start:end])
      self.direction_forward = bool(self.direction_forward)
      self.enabled = bool(self.enabled)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.errors = str[start:end].decode('utf-8')
      else:
        self.errors = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_qi2B = None
def _get_struct_qi2B():
    global _struct_qi2B
    if _struct_qi2B is None:
        _struct_qi2B = struct.Struct("<qi2B")
    return _struct_qi2B
