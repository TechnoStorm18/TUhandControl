// Generated by gencpp from file adc_joystick_msg/ADC_Joystick.msg
// DO NOT EDIT!


#ifndef ADC_JOYSTICK_MSG_MESSAGE_ADC_JOYSTICK_H
#define ADC_JOYSTICK_MSG_MESSAGE_ADC_JOYSTICK_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace adc_joystick_msg
{
template <class ContainerAllocator>
struct ADC_Joystick_
{
  typedef ADC_Joystick_<ContainerAllocator> Type;

  ADC_Joystick_()
    : select(false)
    , x_axis_raw(0)
    , y_axis_raw(0)  {
    }
  ADC_Joystick_(const ContainerAllocator& _alloc)
    : select(false)
    , x_axis_raw(0)
    , y_axis_raw(0)  {
  (void)_alloc;
    }



   typedef uint8_t _select_type;
  _select_type select;

   typedef uint16_t _x_axis_raw_type;
  _x_axis_raw_type x_axis_raw;

   typedef uint16_t _y_axis_raw_type;
  _y_axis_raw_type y_axis_raw;




  typedef boost::shared_ptr< ::adc_joystick_msg::ADC_Joystick_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::adc_joystick_msg::ADC_Joystick_<ContainerAllocator> const> ConstPtr;

}; // struct ADC_Joystick_

typedef ::adc_joystick_msg::ADC_Joystick_<std::allocator<void> > ADC_Joystick;

typedef boost::shared_ptr< ::adc_joystick_msg::ADC_Joystick > ADC_JoystickPtr;
typedef boost::shared_ptr< ::adc_joystick_msg::ADC_Joystick const> ADC_JoystickConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::adc_joystick_msg::ADC_Joystick_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::adc_joystick_msg::ADC_Joystick_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace adc_joystick_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'adc_joystick_msg': ['/home/wesley/Sources/TUhandControl/TivaC/catkin_ws/src/adc_joystick_msg/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::adc_joystick_msg::ADC_Joystick_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::adc_joystick_msg::ADC_Joystick_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::adc_joystick_msg::ADC_Joystick_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::adc_joystick_msg::ADC_Joystick_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::adc_joystick_msg::ADC_Joystick_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::adc_joystick_msg::ADC_Joystick_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::adc_joystick_msg::ADC_Joystick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "832227e0bdded7eb16fd560e3102fbf2";
  }

  static const char* value(const ::adc_joystick_msg::ADC_Joystick_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x832227e0bdded7ebULL;
  static const uint64_t static_value2 = 0x16fd560e3102fbf2ULL;
};

template<class ContainerAllocator>
struct DataType< ::adc_joystick_msg::ADC_Joystick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "adc_joystick_msg/ADC_Joystick";
  }

  static const char* value(const ::adc_joystick_msg::ADC_Joystick_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::adc_joystick_msg::ADC_Joystick_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool select\n\
uint16 x_axis_raw\n\
uint16 y_axis_raw\n\
";
  }

  static const char* value(const ::adc_joystick_msg::ADC_Joystick_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::adc_joystick_msg::ADC_Joystick_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.select);
      stream.next(m.x_axis_raw);
      stream.next(m.y_axis_raw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct ADC_Joystick_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::adc_joystick_msg::ADC_Joystick_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::adc_joystick_msg::ADC_Joystick_<ContainerAllocator>& v)
  {
    s << indent << "select: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.select);
    s << indent << "x_axis_raw: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.x_axis_raw);
    s << indent << "y_axis_raw: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.y_axis_raw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ADC_JOYSTICK_MSG_MESSAGE_ADC_JOYSTICK_H
