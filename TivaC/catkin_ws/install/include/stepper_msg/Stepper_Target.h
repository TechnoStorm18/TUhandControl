// Generated by gencpp from file stepper_msg/Stepper_Target.msg
// DO NOT EDIT!


#ifndef STEPPER_MSG_MESSAGE_STEPPER_TARGET_H
#define STEPPER_MSG_MESSAGE_STEPPER_TARGET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace stepper_msg
{
template <class ContainerAllocator>
struct Stepper_Target_
{
  typedef Stepper_Target_<ContainerAllocator> Type;

  Stepper_Target_()
    : position_steps(0)
    , top_speed_steps_per_second(0)  {
    }
  Stepper_Target_(const ContainerAllocator& _alloc)
    : position_steps(0)
    , top_speed_steps_per_second(0)  {
  (void)_alloc;
    }



   typedef uint32_t _position_steps_type;
  _position_steps_type position_steps;

   typedef uint32_t _top_speed_steps_per_second_type;
  _top_speed_steps_per_second_type top_speed_steps_per_second;




  typedef boost::shared_ptr< ::stepper_msg::Stepper_Target_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::stepper_msg::Stepper_Target_<ContainerAllocator> const> ConstPtr;

}; // struct Stepper_Target_

typedef ::stepper_msg::Stepper_Target_<std::allocator<void> > Stepper_Target;

typedef boost::shared_ptr< ::stepper_msg::Stepper_Target > Stepper_TargetPtr;
typedef boost::shared_ptr< ::stepper_msg::Stepper_Target const> Stepper_TargetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::stepper_msg::Stepper_Target_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::stepper_msg::Stepper_Target_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace stepper_msg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'stepper_msg': ['/home/wesley/Sources/TUhandControl/TivaC/catkin_ws/src/stepper_msg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::stepper_msg::Stepper_Target_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::stepper_msg::Stepper_Target_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::stepper_msg::Stepper_Target_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::stepper_msg::Stepper_Target_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stepper_msg::Stepper_Target_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::stepper_msg::Stepper_Target_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::stepper_msg::Stepper_Target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "737f4dc6071f1d903de2da2901e5c3ca";
  }

  static const char* value(const ::stepper_msg::Stepper_Target_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x737f4dc6071f1d90ULL;
  static const uint64_t static_value2 = 0x3de2da2901e5c3caULL;
};

template<class ContainerAllocator>
struct DataType< ::stepper_msg::Stepper_Target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "stepper_msg/Stepper_Target";
  }

  static const char* value(const ::stepper_msg::Stepper_Target_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::stepper_msg::Stepper_Target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 position_steps\n\
uint32 top_speed_steps_per_second\n\
";
  }

  static const char* value(const ::stepper_msg::Stepper_Target_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::stepper_msg::Stepper_Target_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position_steps);
      stream.next(m.top_speed_steps_per_second);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Stepper_Target_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::stepper_msg::Stepper_Target_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::stepper_msg::Stepper_Target_<ContainerAllocator>& v)
  {
    s << indent << "position_steps: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.position_steps);
    s << indent << "top_speed_steps_per_second: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.top_speed_steps_per_second);
  }
};

} // namespace message_operations
} // namespace ros

#endif // STEPPER_MSG_MESSAGE_STEPPER_TARGET_H
